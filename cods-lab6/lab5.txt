Atividade 1:

1. Y pode terminar com os valores 1, 2 e 3.
O valor 3 aparece caso a aconteça os seguintes eventos:

Thread 2 escreve em x , ...00010
Thread 1 começa a escrever em x, ...000001
Só que consegue apenas preencher o primeiro bit do número e a Thread 3 entra e imprime o que está na memória, que é a junção dos dois.
Ou seja, o número acaba ficando uma parte do que foi escrito na thread 2 e outra na thread 1:
..0011

Sim, o problema apresenta condição de corrida pois o seu resultado depende da ordem que as Threads foram executadas.


Atividade 2:

1. A saída esperada é 20000000.
2. Não, nunca foram o valor esperado. Isto acontece por que a variável s é uma seção crítica do código, e como as duas threads estão lendo , somando 1 , e escrevendo na mesma váriavel ao mesmo tempo, acaba-se gerando um valor errado, pois podem estar consultando um valor e fazendo uma soma que já está alterado pela outra thread.


Atividade 3:

2. Sim, os valores são sempres os esperados.
3. Mesmo alterando o número de threads, os resultados são sempre exatos, o único efeito colateral é que o tempo aumenta , conforme aumentam o número de threads.




